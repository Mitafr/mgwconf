/*
 * Microgateway configuration API
 *
 * # Introduction This is the configuration API for Swift Microgateway (MGW). It allows remotly configure Microgateway. # Authentication Use API Key shared between Business Application and Microgateway. # Audience:    * Business analysts and architects to understand the functionality of the Microgateway configuration API and how to integrate the use of the MGW within their organisation   * Software developers using the API to configure MGW
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developer@swift.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use crate::InnerEntityTrait;

/// ApplicationProfileEntity : Application profile information: profile id, rbac scope, list of SAG User DNs or single Soft certificate alias.\\n IMPORTANT: Only one of  userDNs or certificateAlias should be provided
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationProfileEntity {
    #[serde(rename = "applicationName")]
    pub application_name: String,
    #[serde(rename = "profileName")]
    pub profile_name: String,
    #[serde(rename = "rbacScope", skip_serializing_if = "Option::is_none")]
    pub rbac_scope: Option<String>,
    #[serde(rename = "userDNs", skip_serializing_if = "Option::is_none")]
    pub user_dns: Option<Vec<String>>,
    #[serde(rename = "certificateAlias", skip_serializing_if = "Option::is_none")]
    pub certificate_alias: Option<String>,
}

impl ApplicationProfileEntity {
    /// Application profile information: profile id, rbac scope, list of SAG User DNs or single Soft certificate alias.\\n IMPORTANT: Only one of  userDNs or certificateAlias should be provided
    pub fn new(application_name: String, profile_name: String) -> ApplicationProfileEntity {
        ApplicationProfileEntity {
            application_name,
            profile_name,
            rbac_scope: None,
            user_dns: None,
            certificate_alias: None,
        }
    }
}

impl InnerEntityTrait for ApplicationProfileEntity {
    fn entity_type(&self) -> &str {
        "ApplicationProfileEntity"
    }
    fn name(&self) -> String {
        self.application_name.to_string()
    }
    fn to_string(&self) -> String {
        serde_json::to_string_pretty(self).unwrap()
    }
    fn as_any(&self) -> &dyn std::any::Any {
        self
    }
}
