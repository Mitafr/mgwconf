/*
 * Microgateway configuration API
 *
 * # Introduction This is the configuration API for Swift Microgateway (MGW). It allows remotly configure Microgateway. # Authentication Use API Key shared between Business Application and Microgateway. # Audience:    * Business analysts and architects to understand the functionality of the Microgateway configuration API and how to integrate the use of the MGW within their organisation   * Software developers using the API to configure MGW
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developer@swift.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use crate::InnerEntityTrait;

/// ApiCredentialsEntity : API client credential information: application name, consumer key and secret
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiCredentialsEntity {
    #[serde(rename = "applicationName")]
    pub application_name: String,
    #[serde(rename = "consumerKey")]
    pub consumer_key: String,
    #[serde(rename = "consumerSecret")]
    pub consumer_secret: String,
}

impl ApiCredentialsEntity {
    /// API client credential information: application name, consumer key and secret
    pub fn new(
        application_name: String,
        consumer_key: String,
        consumer_secret: String,
    ) -> ApiCredentialsEntity {
        ApiCredentialsEntity {
            application_name,
            consumer_key,
            consumer_secret,
        }
    }
}

impl InnerEntityTrait for ApiCredentialsEntity {
    fn entity_type(&self) -> &str {
        "ApiCredentialsEntity"
    }
    fn name(&self) -> String {
        self.application_name.to_string()
    }
    fn to_string(&self) -> String {
        serde_json::to_string_pretty(self).unwrap()
    }
    fn as_any(&self) -> &dyn std::any::Any {
        self
    }
}
